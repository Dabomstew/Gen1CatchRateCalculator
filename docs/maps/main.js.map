{"version":3,"sources":["main.js"],"names":["gameSpecificCycleCounts","RB","reroll1","reroll2","Y","setRateBar","progressBarClass","percent","progressBar","$","css","attr","html","className","loadingSpinner","on","removeClass","pokemon","JSON","parse","val","ball","level","parseInt","currentHPPercent","status","game","includes","name","catchRate","reroll1Cycles","reroll2Cycles","createCatchRateWorker","hpDV","Promise","resolve","reject","catchRateWorker","Worker","onmessage","e","data","postMessage","promises","i","push","all","then","results","actualRate","intendedRate","forEach","result","addClass","parseFloat","toFixed","this","value"],"mappings":"AAAA,MAAMA,EAA0B,CAC5BC,GAAI,CAAEC,QAAS,IAAKC,QAAS,KAC7BC,EAAG,CAAEF,QAAS,IAAKC,QAAS,MAEhC,SAASE,EAAWC,EAAkBC,GAClC,IAAIC,EAAcC,EAAE,IAAIH,GACxBE,EAAYE,IAAI,QAAYH,EAAH,KAAeI,KAAK,gBAAiBJ,GAC9DE,EAAE,IAAIH,GAAoBM,KAAQL,EAAH,KAC/BC,EAAY,GAAGK,UAAY,iBAAgBN,GAAW,GAAK,aAAe,aAE9E,IAAIO,EAAiBL,EAAE,mBAEvBA,EAAE,UAAUM,GAAG,SAAS,WACpBD,EAAeE,YAAY,UAC3B,IAAIC,EAAUC,KAAKC,MAAMV,EAAE,YAAYW,OACnCC,EAAOH,KAAKC,MAAMV,EAAE,SAASW,OAC7BE,EAAQC,SAASd,EAAE,UAAUW,OAC7BI,EAAmBD,SAASd,EAAE,YAAYW,OAC1CK,EAAShB,EAAE,WAAWW,MACtBM,EAAOjB,EAAE,SAASW,MACT,OAATM,GACI,CAAC,YAAa,aAAaC,SAASV,EAAQW,QAC5CX,EAAQY,UAAY,IAG5B,IAAIC,EAAgB9B,EAAwB0B,GAAMxB,QAC9C6B,EAAgB/B,EAAwB0B,GAAMvB,QAElD,SAAS6B,EAAsBC,GAC3B,OAAO,IAAIC,QAAQ,CAACC,EAASC,KACzB,MAAMC,EAAkB,IAAIC,OAAO,yBACnCD,EAAgBE,UAAY,SAAUC,GAClCL,EAAQK,EAAEC,OAEdJ,EAAgBK,YAAY,CAACzB,EAASI,EAAMC,EAAOE,EAAkBC,EAAQK,EAAeC,EAAeE,MAInH,IADA,IAAIU,EAAW,GACNC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAASE,KAAKb,EAAsBY,IAGxCV,QAAQY,IAAIH,GAAUI,KAAKC,IACvB,IAAIC,EAAa,EACbC,EAAe,EACnBF,EAAQG,SAAQ,SAAUC,GACtBH,GAAcG,EAAO,GACrBF,GAAgBE,EAAO,MAE3BtC,EAAeuC,SAAS,UACxBhD,EAAW,aAAciD,WAAWL,EAAa,WAAWM,QAAQ,IACpElD,EAAW,eAAgBiD,WAAW,IAAMJ,EAAe,IAAIK,QAAQ,SAI/E9C,EAAE,UAAUM,GAAG,UAAU,WACjByC,KAAKC,MAAQ,IAAGD,KAAKC,MAAQ,GAC7BD,KAAKC,MAAQ,MAAKD,KAAKC,MAAQ","file":"../js/main.js","sourcesContent":["const gameSpecificCycleCounts = {\r\n    RB: { reroll1: 520, reroll2: 564 },\r\n    Y: { reroll1: 516, reroll2: 560 }\r\n}\r\nfunction setRateBar(progressBarClass, percent) {\r\n    var progressBar = $(`#${progressBarClass}`);\r\n    progressBar.css(\"width\", `${percent}%`).attr(\"aria-valuenow\", percent);\r\n    $(`.${progressBarClass}`).html(`${percent}%`);\r\n    progressBar[0].className = `progress-bar ${percent >= 50 ? 'bg-success' : 'bg-danger'}`\r\n}\r\nvar loadingSpinner = $('.spinner-border');\r\n\r\n$('button').on('click', function () {\r\n    loadingSpinner.removeClass('d-none');\r\n    var pokemon = JSON.parse($('#species').val());\r\n    var ball = JSON.parse($('#ball').val());\r\n    var level = parseInt($('#level').val());\r\n    var currentHPPercent = parseInt($('#hpRange').val());\r\n    var status = $('#status').val();\r\n    var game = $('#game').val();\r\n    if (game === \"RB\") {\r\n        if ([\"DRAGONAIR\", \"DRAGONITE\"].includes(pokemon.name)) {\r\n            pokemon.catchRate = 45;\r\n        }\r\n    }\r\n    var reroll1Cycles = gameSpecificCycleCounts[game].reroll1;\r\n    var reroll2Cycles = gameSpecificCycleCounts[game].reroll2;\r\n\r\n    function createCatchRateWorker(hpDV) {\r\n        return new Promise((resolve, reject) => {\r\n            const catchRateWorker = new Worker('js/catchRateWorker.js');\r\n            catchRateWorker.onmessage = function (e) {\r\n                resolve(e.data);\r\n            }\r\n            catchRateWorker.postMessage([pokemon, ball, level, currentHPPercent, status, reroll1Cycles, reroll2Cycles, hpDV]);\r\n        });\r\n    }\r\n    var promises = [];\r\n    for (var i = 0; i < 16; i++) {\r\n        promises.push(createCatchRateWorker(i));\r\n    }\r\n\r\n    Promise.all(promises).then(results => {\r\n        var actualRate = 0;\r\n        var intendedRate = 0;\r\n        results.forEach(function (result) {\r\n            actualRate += result[0];\r\n            intendedRate += result[1];\r\n        });\r\n        loadingSpinner.addClass('d-none');\r\n        setRateBar('actualRate', parseFloat(actualRate / 671088.64).toFixed(2));\r\n        setRateBar('intendedRate', parseFloat(100 * intendedRate / 16).toFixed(2));\r\n    });\r\n});\r\n\r\n$('#level').on('change', function () {\r\n    if (this.value < 1) this.value = 1;\r\n    if (this.value > 100) this.value = 100;\r\n});"]}