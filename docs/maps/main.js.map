{"version":3,"sources":["main.js"],"names":["pokeballs","pokeBall","ballFactor","reroll1","reroll2","ballRerollCutoff","greatBall","RB","$","click","JSON","parse","val","pokemon","catchRate","baseHP","level","parseInt","ultraBall","Math","max","includes","statusLabel","status","gameSpecificCycleCounts","game","reroll2Cycles","hpDV","maxHP","hpFactor","ball","currentHPModifier","currentHPPercent","min","intendedRate","ihra","roll2Cycles","actualSuccesses","idivstate","hra","divstate","reroll1Cycles","$element","percent","attr","html","className","concat","setRateBar","catchMon","parseFloat","toFixed","reroll"],"mappings":"aAAA,IAAIA,UAAY,CAACC,SAAW,CAACC,WAAY,GAAIC,SAAS,EAAOC,SAAS,EAAOC,iBAAkB,KAC3FC,UAAW,CAACJ,WAAY,EAAGC,SAAS,EAAMC,SAAS,EAAOC,iBAAkB,KAD5EL,UAAS,CAAGE,WAAA,GAAAC,SAAA,EAAAC,SAAA,EAAAC,iBAAA,KAACJ,WAAW,CAAAC,WAAA,GAAAC,SAAA,EAAAC,SAAA,EAAAC,iBAAA,MAACH,wBAAD,CAAAK,GAAA,CAAAJ,QAAA,IAAAC,QAAA,KAAiBD,EAAAA,CAAAA,QAAjB,IAAAC,QAAA,MAAiCA,YAAjC,MAAAI,EAAA,UAAZC,MAAA,WACZH,IAAAA,EAAW,EAACJ,EAAD,EAAgBC,EAAhBO,KAAAC,MAAAH,EAAA,YAAAI,OAA+BR,EAA/BS,EAAAC,UAA+CT,EAAAA,EAAkBU,OADhEC,EAAAC,SAAAT,EAAA,UAAAI,OAEZM,EAAWlB,UAAAQ,EAAA,SAAAI,OAACV,EAADiB,KAAAC,IAAAH,SAAAT,EAAA,YAAAI,OAAA,GAAiBT,EAAjBK,EAAA,WAAAI,MAAgCR,EAAhC,EAA+CC,CAAAA,WAAgB,SAAE,aAAAgB,SAAAC,GAFhEC,EAAA,GAGA,CAAA,SAAA,UAAAF,SAAAC,KAACpB,EAAY,IACzBsB,IAD4CpB,IAAAA,EAASI,EAAzC,SAAAI,MAA+CP,EAAkBmB,wBAAAC,GAAAtB,QAAjEuB,EAAAF,wBAAAC,GAAArB,QACZoB,EAAAA,EAAAA,EAA0B,GAAAG,IAAA,CAAK,IAAAC,GAAA,GAAAb,EAAAY,GAAAX,EAAA,KAAA,GAAAA,EAAA,GAASa,EAAT,IAAAD,EAAAE,EAAA5B,YAAA,EAAuB6B,GAAEH,GAAAI,EAAA,MAAA,GAAA,GAAA,EAA9B,EAAAD,IACvBF,EAAAA,EAAAE,GAAA,GAAgB3B,EAASe,KAAAc,IAAAJ,EAAA,KAAzBK,GAAAX,EAAAO,EAAAzB,iBAAAc,KAAAc,IAAAnB,EAAA,EAAAgB,EAAAzB,iBAAAkB,GAAAO,EAAAzB,kBAAAwB,EAAA,GAAA,IADP,IAAA,IAAAM,EAAA,EAAAA,EAAA,IAAAA,IAEIC,GAAWD,EAAfZ,EAEYd,GAAkB,WAEtB4B,IAAe,IAAnBC,EAAA,EAAAA,EAAA,MAAAA,GAAA,EAAA,CAKWtC,IAJO,IAEGe,EAArBuB,EACsBC,EAACJ,EAEHI,EAAQnB,GAAIH,IAAW,GAAYL,IACnCkB,EAAWlB,SAA/B,IAAA2B,GACAC,EAAAA,EAAAC,EAAA,OAgCiC,MA9B7BX,EAAA1B,SAAA,IAAAmC,KACkBC,EAAUnB,EAASC,EAAc,OACnD,KAYCe,KANLvB,EAAmBa,KAqCCY,EAAOA,IAlCnBR,EAA4BS,EAAIR,YAAV,SAkCiB,GAAM,MAjCtBH,EAE1B,EAAA,GAIG,SAAIM,EAAJO,EAAmBC,GACfN,EAAAA,IAAAA,QAAAA,GAAAA,OAAAM,EAAAN,MAAAO,KAAA,gBAAAD,GAAAE,KAAAR,GAAAA,OAAAM,EAAAN,MADJK,EAEO,GAAAI,UAFP,gBAAAC,OAEO,IAAAJ,EAAA,aAAA,aAECK,EAAIC,EAAAA,eAAJC,WAAAb,EAAA,WAAAc,QAAA,IACAH,EAAII,EAAAA,iBAAJF,WAAA,IAAAhB,EAAA,IAAAiB,QAAA","file":"../js/main.js","sourcesContent":["var pokeballs = {pokeBall : {ballFactor: 12, reroll1: false, reroll2: false, ballRerollCutoff: 256},\r\n    greatBall: {ballFactor: 8, reroll1: true, reroll2: false, ballRerollCutoff: 201},\r\n    ultraBall: {ballFactor: 12, reroll1: true, reroll2: true, ballRerollCutoff: 151},\r\n    safariBall: {ballFactor: 12, reroll1: true, reroll2: true, ballRerollCutoff: 151}}\r\nvar gameSpecificCycleCounts = {RB: { reroll1: 520, reroll2: 564},\r\n    Y: { reroll1: 516, reroll2: 560}}\r\nvar roll2Cycles = 23664;\r\n\r\n$('button').click(function () {\r\n    var intendedRate = 0;\r\n    var actualSuccesses = 0;\r\n    var pokemon = JSON.parse($('#species').val());\r\n    var catchRate = pokemon.catchRate;\r\n    var baseHP = pokemon.baseHP;\r\n    var level = parseInt($('#level').val());\r\n    var ball = pokeballs[$('#ball').val()];\r\n    var currentHPPercent = Math.max(parseInt($('#hpRange').val()), 1);\r\n    var statusLabel = $('#status').val();\r\n    var status = 0;\r\n    if ([\"poisoned\", \"burned\", \"paralyzed\"].includes(statusLabel)) {\r\n        status = 12;\r\n    } else if ([\"asleep\", \"frozen\"].includes(statusLabel)) {\r\n        status = 25;\r\n    }\r\n    var game = $('#game').val();\r\n    var reroll1Cycles = gameSpecificCycleCounts[game].reroll1;\r\n    var reroll2Cycles = gameSpecificCycleCounts[game].reroll2;\r\n\r\n    for (var hpDV = 0; hpDV < 16; hpDV++) {\r\n        var maxHP = (((baseHP + hpDV) * 2 * level / 100) >> 0) + level + 10;\r\n        var hpFactor = (((maxHP * 255) / ball.ballFactor) >> 0);\r\n        var currentHPModifier = (((maxHP * (currentHPPercent / 100)) >> 0) / 4) >> 0;\r\n        if (currentHPModifier > 0) {\r\n            hpFactor = (hpFactor / currentHPModifier) >> 0;\r\n        }\r\n        hpFactor = Math.min(hpFactor, 255);\r\n        intendedRate += status / ball.ballRerollCutoff + Math.min(catchRate + 1, ball.ballRerollCutoff - status) / ball.ballRerollCutoff * (hpFactor + 1) / 256;\r\n        for (var ihra = 0; ihra < 256; ihra++) {\r\n            if (ihra < status) {\r\n                actualSuccesses += 16384;\r\n            } else {\r\n                for (var idivstate = 0; idivstate < 65536; idivstate += 4) {\r\n                    var catchMon = true;\r\n                    var reroll = false;\r\n                    var divstate = idivstate;\r\n                    var hra = ihra;\r\n                    do {\r\n                        hra = (hra + (divstate >>> 8)) & 0xFF;\r\n                        if (ball.reroll1 && hra > 200) {\r\n                            divstate = (divstate + reroll1Cycles) & 0xFFFF;\r\n                            reroll = true;\r\n                        }\r\n                        else if (ball.reroll2 && hra > 150) {\r\n                            divstate = (divstate + reroll2Cycles) & 0xFFFF;\r\n                            reroll = true;\r\n                        }\r\n                        else {\r\n                            reroll = false;\r\n                        }\r\n                    }\r\n                    while (reroll);\r\n                    if (hra > catchRate) {\r\n                        catchMon = false;\r\n                    } else {\r\n                        divstate = (divstate + roll2Cycles) & 0xFFFF;\r\n                        hra = (hra + (divstate >>> 8)) & 0xFF;\r\n                        catchMon = hra <= hpFactor;\r\n                    }\r\n                    actualSuccesses += catchMon ? 1 : 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setRateBar($element, percent) {\r\n        $element.css(\"width\", `${percent}%`).attr(\"aria-valuenow\", percent).html(`${percent}%`);\r\n        $element[0].className = `progress-bar ${percent >= 50 ? 'bg-success' : 'bg-danger'}`\r\n    }\r\n    setRateBar($('#actualRate'), parseFloat(actualSuccesses / 671088.64).toFixed(2));\r\n    setRateBar($('#intendedRate'), parseFloat(100 * intendedRate / 16).toFixed(2));\r\n});"]}