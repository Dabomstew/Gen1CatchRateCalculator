{"version":3,"sources":["index.js"],"names":["gameSpecificCycleCounts","RB","Y","gameReroll2Counts","actualRateBar","$","intendedRateBar","loadingSpinner","setRateBar","progressElement","percent","parseFloat","toFixed","find","html","css","attr","className","getJsonValue","$element","JSON","parse","val","getIntValue","parseInt","on","removeClass","pokemon","game","includes","name","catchRate","catchRateData","concat","Promise","all","Array","map","x","i","createCatchRateWorker","hpDV","resolve","reject","catchRateWorker","Worker","onmessage","e","data","postMessage","then","results","actualRate","intendedRate","forEach","result","addClass","this","value","Math","min","max"],"mappings":"AAAA,MAAMA,EAA0B,CAC5BC,GAAI,CAAC,IAAK,KACVC,EAAG,CAAC,IAAK,MAEPC,EAAoB,CACtBF,GAAI,EACJC,EAAG,KAEP,IAAIE,EAAgBC,EAAE,oBAClBC,EAAkBD,EAAE,sBACpBE,EAAiBF,EAAE,mBAEvB,SAASG,EAAWC,EAAiBC,GACjCA,EAAUC,WAAWD,GAASE,QAAQ,GACtCH,EAAgBI,KAAK,UAAUC,KAAQJ,EAAH,KACpCD,EAAgBI,KAAK,iBAAiBE,IAAI,QAAYL,EAAH,KAAeM,KAAK,gBAAiBN,GAAS,GAAGO,UAAY,iBAAgBP,GAAW,GAAK,aAAe,aAGnK,SAASQ,EAAaC,GAClB,OAAOC,KAAKC,MAAMF,EAASG,OAG/B,SAASC,EAAYJ,GACjB,OAAOK,SAASL,EAASG,OAG7BjB,EAAE,eAAeoB,GAAG,SAAS,WACzBlB,EAAemB,YAAY,UAE3B,IAAIC,EAAUT,EAAab,EAAE,aACzBuB,EAAOvB,EAAE,SAASiB,MACT,OAATM,GACI,CAAC,YAAa,aAAaC,SAASF,EAAQG,QAC5CH,EAAQI,UAAY,IAG5B,IAAIC,EAAgB,CAACL,EACjBT,EAAab,EAAE,UACfkB,EAAYlB,EAAE,WACdkB,EAAYlB,EAAE,aACdA,EAAE,WAAWiB,OACZW,OAAOjC,EAAwB4B,GAAMK,OAAO9B,EAAkByB,KAYnEM,QAAQC,IAAI,IAAIC,MAAM,KAAKC,IAAI,CAACC,EAAGC,KAAMC,OAVVC,EAUgCF,EATpD,IAAIL,QAAQ,CAACQ,EAASC,KACzB,MAAMC,EAAkB,IAAIC,OAAO,yBACnCD,EAAgBE,UAAY,SAAUC,GAClCL,EAAQK,EAAEC,OAEdJ,EAAgBK,YAAYjB,EAAcC,OAAOQ,MANzD,IAA+BA,KAUqCS,KAAKC,IACrE,IAAIC,EAAa,EACbC,EAAe,EACnBF,EAAQG,SAAQ,SAAUC,GACtBH,GAAcG,EAAO,GACrBF,GAAgBE,EAAO,MAE3BhD,EAAeiD,SAAS,UACxBhD,EAAWJ,EAAegD,EAAa,WACvC5C,EAAWF,EAAiB,IAAM+C,EAAe,SAIzDhD,EAAE,UAAUoB,GAAG,UAAU,WACrBgC,KAAKC,MAAQC,KAAKC,IAAID,KAAKE,IAAIJ,KAAKC,MAAO,GAAI","file":"../js/index.js","sourcesContent":["const gameSpecificCycleCounts = {\r\n    RB: [520, 564],\r\n    Y: [516, 560]\r\n}\r\nconst gameReroll2Counts = {\r\n    RB: 0,\r\n    Y: 152\r\n}\r\nvar actualRateBar = $('.actualRateGroup');\r\nvar intendedRateBar = $('.intendedRateGroup');\r\nvar loadingSpinner = $('.spinner-border');\r\n\r\nfunction setRateBar(progressElement, percent) {\r\n    percent = parseFloat(percent).toFixed(2);\r\n    progressElement.find('p.rate').html(`${percent}%`);\r\n    progressElement.find('.progress-bar').css(\"width\", `${percent}%`).attr(\"aria-valuenow\", percent)[0].className = `progress-bar ${percent >= 50 ? 'bg-success' : 'bg-danger'}`;\r\n}\r\n\r\nfunction getJsonValue($element) {\r\n    return JSON.parse($element.val());\r\n}\r\n\r\nfunction getIntValue($element) {\r\n    return parseInt($element.val());\r\n}\r\n\r\n$('form button').on('click', function () {\r\n    loadingSpinner.removeClass('d-none');\r\n\r\n    var pokemon = getJsonValue($('#species'));\r\n    var game = $('#game').val();\r\n    if (game === \"RB\") {\r\n        if ([\"DRAGONAIR\", \"DRAGONITE\"].includes(pokemon.name)) {\r\n            pokemon.catchRate = 45;\r\n        }\r\n    }\r\n    var catchRateData = [pokemon,\r\n        getJsonValue($('#ball')),\r\n        getIntValue($('#level')),\r\n        getIntValue($('#hpRange')),\r\n        $('#status').val()]\r\n        .concat(gameSpecificCycleCounts[game].concat(gameReroll2Counts[game]));\r\n\r\n    function createCatchRateWorker(hpDV) {\r\n        return new Promise((resolve, reject) => {\r\n            const catchRateWorker = new Worker('js/catchRateWorker.js');\r\n            catchRateWorker.onmessage = function (e) {\r\n                resolve(e.data);\r\n            }\r\n            catchRateWorker.postMessage(catchRateData.concat(hpDV));\r\n        });\r\n    }\r\n\r\n    Promise.all([...Array(16)].map((x, i) => createCatchRateWorker(i))).then(results => {\r\n        var actualRate = 0;\r\n        var intendedRate = 0;\r\n        results.forEach(function (result) {\r\n            actualRate += result[0];\r\n            intendedRate += result[1];\r\n        });\r\n        loadingSpinner.addClass('d-none');\r\n        setRateBar(actualRateBar, actualRate / 671088.64);\r\n        setRateBar(intendedRateBar, 100 * intendedRate / 16);\r\n    });\r\n});\r\n\r\n$('#level').on('change', function () {\r\n    this.value = Math.min(Math.max(this.value, 2), 100);\r\n});"]}