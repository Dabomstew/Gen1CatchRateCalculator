{"version":3,"sources":["catchRateWorker.js"],"names":["onmessage","e","catchRate","data","ballRerollCutoff","ball","ballReroll1","reroll1","ballReroll2","reroll2","status","hpFactor","reroll1Count","reroll2Count","roll2Count","intendedRate","Math","min","actualSuccesses","initialRNGByte","initialDividerWord","currentDividerWord","currentRNGByte","postMessage","close"],"mappings":"AAAAA,UAAY,SAAUC,GAYlB,IAXA,IAAIC,EAAYD,EAAEE,KAAKD,UACnBE,EAAmBH,EAAEE,KAAKE,KAAKD,iBAC/BE,EAAcL,EAAEE,KAAKE,KAAKE,QAC1BC,EAAcP,EAAEE,KAAKE,KAAKI,QAC1BC,EAAST,EAAEE,KAAKO,OAChBC,EAAWV,EAAEE,KAAKQ,SAClBC,EAAeX,EAAEE,KAAKS,aACtBC,EAAeZ,EAAEE,KAAKU,aACtBC,EAAab,EAAEE,KAAKW,WACpBC,EAAeL,EAASN,EAAmBY,KAAKC,IAAIf,EAAY,EAAGE,EAAmBM,GAAUN,GAAoBO,EAAW,GAAK,IACpIO,EAAkB,MAAQR,EACrBS,EAAiBT,EAAQS,EAAiB,IAAKA,IACpD,IAAK,IAAIC,EAAqB,EAAGA,EAAqB,MAAOA,GAAsB,EAAG,CAGlF,IAFA,IAAIC,EAAqBD,EACrBE,EAAiBH,IAGjB,GADAG,EAAkBA,GAAkBD,IAAuB,GAAM,IAC7Df,GAAegB,EAAiB,IAChCD,EAAsBA,EAAqBT,EAAgB,UAE1D,CAAA,KAAIJ,GAAec,EAAiB,KAGrC,MAFAD,EAAsBA,EAAqBR,EAAgB,MAM9DS,EAAiBZ,GAAWR,IAG7BgB,IADAI,EAAkBA,IADlBD,EAAsBA,EAAqBP,EAAc,SACE,GAAM,MAC5BH,EAAW,EAAI,GAIhEY,YAAY,CAACL,EAAiBH,IAC9BS","file":"../js/catchRateWorker.js","sourcesContent":["onmessage = function (e) {\r\n    var catchRate = e.data.catchRate;\r\n    var ballRerollCutoff = e.data.ball.ballRerollCutoff;\r\n    var ballReroll1 = e.data.ball.reroll1;\r\n    var ballReroll2 = e.data.ball.reroll2;\r\n    var status = e.data.status;\r\n    var hpFactor = e.data.hpFactor;\r\n    var reroll1Count = e.data.reroll1Count;\r\n    var reroll2Count = e.data.reroll2Count;\r\n    var roll2Count = e.data.roll2Count;\r\n    var intendedRate = status / ballRerollCutoff + Math.min(catchRate + 1, ballRerollCutoff - status) / ballRerollCutoff * (hpFactor + 1) / 256;\r\n    var actualSuccesses = 16384 * status;\r\n    for (var initialRNGByte = status; initialRNGByte < 256; initialRNGByte++) {\r\n        for (var initialDividerWord = 0; initialDividerWord < 65536; initialDividerWord += 4) {\r\n            var currentDividerWord = initialDividerWord;\r\n            var currentRNGByte = initialRNGByte;\r\n            do {\r\n                currentRNGByte = (currentRNGByte + (currentDividerWord >>> 8)) & 0xFF;\r\n                if (ballReroll1 && currentRNGByte > 200) {\r\n                    currentDividerWord = (currentDividerWord + reroll1Count) & 0xFFFF;\r\n                }\r\n                else if (ballReroll2 && currentRNGByte > 150) {\r\n                    currentDividerWord = (currentDividerWord + reroll2Count) & 0xFFFF;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            while (true);\r\n            if ((currentRNGByte - status) <= catchRate) {\r\n                currentDividerWord = (currentDividerWord + roll2Count) & 0xFFFF;\r\n                currentRNGByte = (currentRNGByte + (currentDividerWord >>> 8)) & 0xFF;\r\n                actualSuccesses += currentRNGByte <= hpFactor ? 1 : 0;\r\n            }\r\n        }\r\n    }\r\n    postMessage([actualSuccesses, intendedRate]);\r\n    close();\r\n}"]}