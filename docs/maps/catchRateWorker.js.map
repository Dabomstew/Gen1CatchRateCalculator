{"version":3,"sources":["catchRateWorker.js"],"names":["roll2Cycles","onmessage","e","intendedRate","actualSuccesses","pokemon","data","ball","level","currentHPPercent","status","reroll1Cycles","reroll2Cycles","hpDV","maxHP","baseHP","hpFactor","ballFactor","currentHPModifier","Math","min","ballRerollCutoff","catchRate","initialRNGByte","initialDividerWord","currentDividerWord","currentRNGByte","reroll1","reroll2","postMessage","close"],"mappings":"AAAA,MAAMA,EAAc,MAEpBC,UAAY,SAAUC,GAClB,IAAIC,EAAe,EACfC,EAAkB,EAClBC,EAAUH,EAAEI,KAAK,GACjBC,EAAOL,EAAEI,KAAK,GACdE,EAAQN,EAAEI,KAAK,GACfG,EAAmBP,EAAEI,KAAK,GAC1BI,EAASR,EAAEI,KAAK,GAChBK,EAAgBT,EAAEI,KAAK,GACvBM,EAAgBV,EAAEI,KAAK,GACvBO,EAAOX,EAAEI,KAAK,GAEdQ,GAAoC,GAAzBT,EAAQU,OAASF,GAAYL,EAAQ,KAAQ,GAAKA,EAAQ,GACrEQ,EAAsB,IAARF,EAAeP,EAAKU,YAAe,EACjDC,GAAuBJ,GAASL,EAAmB,MAAS,GAAK,GAAM,EACvES,EAAoB,IACpBF,EAAYA,EAAWE,GAAsB,GAEjDF,EAAWG,KAAKC,IAAIJ,EAAU,KAC9Bb,GAAgBO,EAASH,EAAKc,iBAAmBF,KAAKC,IAAIf,EAAQiB,UAAY,EAAGf,EAAKc,iBAAmBX,GAAUH,EAAKc,kBAAoBL,EAAW,GAAK,IAC5JZ,GAAmB,MAAQM,EAC3B,IAAK,IAAIa,EAAiBb,EAAQa,EAAiB,IAAKA,IACpD,IAAK,IAAIC,EAAqB,EAAGA,EAAqB,MAAOA,GAAsB,EAAG,CAGlF,IAFA,IAAIC,EAAqBD,EACrBE,EAAiBH,IAGjB,GADAG,EAAkBA,GAAkBD,IAAuB,GAAM,IAC7DlB,EAAKoB,SAAWD,EAAiB,IACjCD,EAAsBA,EAAqBd,EAAiB,UAE3D,CAAA,KAAIJ,EAAKqB,SAAWF,EAAiB,KAGtC,MAFAD,EAAsBA,EAAqBb,EAAiB,MAM/Dc,EAAiBhB,GAAWL,EAAQiB,YAGrClB,IADAsB,EAAkBA,IADlBD,EAAsBA,EAxClB,MAwCsD,SACC,GAAM,MAC5BT,EAAW,EAAI,GAIhEa,YAAY,CAACzB,EAAiBD,IAC9B2B","file":"../js/catchRateWorker.js","sourcesContent":["const roll2Cycles = 23664;\r\n\r\nonmessage = function (e) {\r\n    var intendedRate = 0;\r\n    var actualSuccesses = 0;\r\n    var pokemon = e.data[0];\r\n    var ball = e.data[1];\r\n    var level = e.data[2];\r\n    var currentHPPercent = e.data[3];\r\n    var status = e.data[4];\r\n    var reroll1Cycles = e.data[5];\r\n    var reroll2Cycles = e.data[6];\r\n    var hpDV = e.data[7];\r\n\r\n    var maxHP = (((pokemon.baseHP + hpDV) * 2 * level / 100) >> 0) + level + 10;\r\n    var hpFactor = (((maxHP * 255) / ball.ballFactor) >> 0);\r\n    var currentHPModifier = (((maxHP * (currentHPPercent / 100)) >> 0) / 4) >> 0;\r\n    if (currentHPModifier > 0) {\r\n        hpFactor = (hpFactor / currentHPModifier) >> 0;\r\n    }\r\n    hpFactor = Math.min(hpFactor, 255);\r\n    intendedRate += status / ball.ballRerollCutoff + Math.min(pokemon.catchRate + 1, ball.ballRerollCutoff - status) / ball.ballRerollCutoff * (hpFactor + 1) / 256;\r\n    actualSuccesses += 16384 * status;\r\n    for (var initialRNGByte = status; initialRNGByte < 256; initialRNGByte++) {\r\n        for (var initialDividerWord = 0; initialDividerWord < 65536; initialDividerWord += 4) {\r\n            var currentDividerWord = initialDividerWord;\r\n            var currentRNGByte = initialRNGByte;\r\n            do {\r\n                currentRNGByte = (currentRNGByte + (currentDividerWord >>> 8)) & 0xFF;\r\n                if (ball.reroll1 && currentRNGByte > 200) {\r\n                    currentDividerWord = (currentDividerWord + reroll1Cycles) & 0xFFFF;\r\n                }\r\n                else if (ball.reroll2 && currentRNGByte > 150) {\r\n                    currentDividerWord = (currentDividerWord + reroll2Cycles) & 0xFFFF;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            while (true);\r\n            if ((currentRNGByte - status) <= pokemon.catchRate) {\r\n                currentDividerWord = (currentDividerWord + roll2Cycles) & 0xFFFF;\r\n                currentRNGByte = (currentRNGByte + (currentDividerWord >>> 8)) & 0xFF;\r\n                actualSuccesses += currentRNGByte <= hpFactor ? 1 : 0;\r\n            }\r\n        }\r\n    }\r\n    postMessage([actualSuccesses, intendedRate]);\r\n    close();\r\n}"]}